============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 4295 was started by wgeraedts on crookshanks,
Tue Jan 20 12:31:37 2015
The command was "prover9 -f graph.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file graph.in


formulas(assumptions).
red(B,F).
red(B,I).
red(C,H).
red(D,J).
red(E,I).
red(G,I).
red(I,J).
blue(C,G).
blue(D,I).
blue(E,H).
blue(F,J).
blue(G,H).
red(A,C) | red(A,E) | red(A,G).
blue(D,A) | blue(D,B).
path_blue(x,y) & (red(y,z) | red(z,y)) -> path_red(x,z).
path_red(x,y) & (blue(y,z) | blue(z,y)) -> path_blue(x,z).
path_blue(x,x).
path_red(x,x).
end_of_list.

formulas(goals).
path_blue(A,B) | path_red(A,B).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 path_blue(x,y) & (red(y,z) | red(z,y)) -> path_red(x,z) # label(non_clause).  [assumption].
2 path_red(x,y) & (blue(y,z) | blue(z,y)) -> path_blue(x,z) # label(non_clause).  [assumption].
3 path_blue(A,B) | path_red(A,B) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
red(B,F).  [assumption].
red(B,I).  [assumption].
red(C,H).  [assumption].
red(D,J).  [assumption].
red(E,I).  [assumption].
red(G,I).  [assumption].
red(I,J).  [assumption].
blue(C,G).  [assumption].
blue(D,I).  [assumption].
blue(E,H).  [assumption].
blue(F,J).  [assumption].
blue(G,H).  [assumption].
red(A,C) | red(A,E) | red(A,G).  [assumption].
blue(D,A) | blue(D,B).  [assumption].
-path_blue(x,y) | -red(y,z) | path_red(x,z).  [clausify(1)].
-path_blue(x,y) | -red(z,y) | path_red(x,z).  [clausify(1)].
-path_red(x,y) | -blue(y,z) | path_blue(x,z).  [clausify(2)].
-path_red(x,y) | -blue(z,y) | path_blue(x,z).  [clausify(2)].
path_blue(x,x).  [assumption].
path_red(x,x).  [assumption].
-path_blue(A,B).  [deny(3)].
-path_red(A,B).  [deny(3)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating path_blue/2
4 -path_red(x,y) | -blue(y,z) | path_blue(x,z).  [clausify(2)].
5 -path_blue(x,y) | -red(y,z) | path_red(x,z).  [clausify(1)].
6 -path_blue(x,y) | -red(z,y) | path_red(x,z).  [clausify(1)].
Derived: -path_red(x,y) | -blue(y,z) | -red(z,u) | path_red(x,u).  [resolve(4,c,5,a)].
Derived: -path_red(x,y) | -blue(y,z) | -red(u,z) | path_red(x,u).  [resolve(4,c,6,a)].
7 -path_red(x,y) | -blue(z,y) | path_blue(x,z).  [clausify(2)].
Derived: -path_red(x,y) | -blue(z,y) | -red(z,u) | path_red(x,u).  [resolve(7,c,5,a)].
Derived: -path_red(x,y) | -blue(z,y) | -red(u,z) | path_red(x,u).  [resolve(7,c,6,a)].
8 path_blue(x,x).  [assumption].
Derived: -red(x,y) | path_red(x,y).  [resolve(8,a,5,a)].
Derived: -red(x,y) | path_red(y,x).  [resolve(8,a,6,a)].
9 -path_blue(A,B).  [deny(3)].
Derived: -path_red(A,x) | -blue(x,B).  [resolve(9,a,4,c)].
Derived: -path_red(A,x) | -blue(B,x).  [resolve(9,a,7,c)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ red, blue, path_red ]).
Function symbol precedence:  function_order([ I, A, D, G, B, C, E, H, J, F ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      10 red(B,F).  [assumption].
kept:      11 red(B,I).  [assumption].
kept:      12 red(C,H).  [assumption].
kept:      13 red(D,J).  [assumption].
kept:      14 red(E,I).  [assumption].
kept:      15 red(G,I).  [assumption].
kept:      16 red(I,J).  [assumption].
kept:      17 blue(C,G).  [assumption].
kept:      18 blue(D,I).  [assumption].
kept:      19 blue(E,H).  [assumption].
kept:      20 blue(F,J).  [assumption].
kept:      21 blue(G,H).  [assumption].
kept:      22 red(A,C) | red(A,E) | red(A,G).  [assumption].
kept:      23 blue(D,A) | blue(D,B).  [assumption].
kept:      24 path_red(x,x).  [assumption].
kept:      25 -path_red(A,B).  [deny(3)].
kept:      26 -path_red(x,y) | -blue(y,z) | -red(z,u) | path_red(x,u).  [resolve(4,c,5,a)].
kept:      27 -path_red(x,y) | -blue(y,z) | -red(u,z) | path_red(x,u).  [resolve(4,c,6,a)].
kept:      28 -path_red(x,y) | -blue(z,y) | -red(z,u) | path_red(x,u).  [resolve(7,c,5,a)].
kept:      29 -path_red(x,y) | -blue(z,y) | -red(u,z) | path_red(x,u).  [resolve(7,c,6,a)].
kept:      30 -red(x,y) | path_red(x,y).  [resolve(8,a,5,a)].
kept:      31 -red(x,y) | path_red(y,x).  [resolve(8,a,6,a)].
kept:      32 -path_red(A,x) | -blue(x,B).  [resolve(9,a,4,c)].
kept:      33 -path_red(A,x) | -blue(B,x).  [resolve(9,a,7,c)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
10 red(B,F).  [assumption].
11 red(B,I).  [assumption].
12 red(C,H).  [assumption].
13 red(D,J).  [assumption].
14 red(E,I).  [assumption].
15 red(G,I).  [assumption].
16 red(I,J).  [assumption].
17 blue(C,G).  [assumption].
18 blue(D,I).  [assumption].
19 blue(E,H).  [assumption].
20 blue(F,J).  [assumption].
21 blue(G,H).  [assumption].
22 red(A,C) | red(A,E) | red(A,G).  [assumption].
23 blue(D,A) | blue(D,B).  [assumption].
24 path_red(x,x).  [assumption].
25 -path_red(A,B).  [deny(3)].
26 -path_red(x,y) | -blue(y,z) | -red(z,u) | path_red(x,u).  [resolve(4,c,5,a)].
27 -path_red(x,y) | -blue(y,z) | -red(u,z) | path_red(x,u).  [resolve(4,c,6,a)].
28 -path_red(x,y) | -blue(z,y) | -red(z,u) | path_red(x,u).  [resolve(7,c,5,a)].
29 -path_red(x,y) | -blue(z,y) | -red(u,z) | path_red(x,u).  [resolve(7,c,6,a)].
30 -red(x,y) | path_red(x,y).  [resolve(8,a,5,a)].
31 -red(x,y) | path_red(y,x).  [resolve(8,a,6,a)].
32 -path_red(A,x) | -blue(x,B).  [resolve(9,a,4,c)].
33 -path_red(A,x) | -blue(B,x).  [resolve(9,a,7,c)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

given #1 (I,wt=3): 10 red(B,F).  [assumption].

given #2 (I,wt=3): 11 red(B,I).  [assumption].

given #3 (I,wt=3): 12 red(C,H).  [assumption].

given #4 (I,wt=3): 13 red(D,J).  [assumption].

given #5 (I,wt=3): 14 red(E,I).  [assumption].

given #6 (I,wt=3): 15 red(G,I).  [assumption].

given #7 (I,wt=3): 16 red(I,J).  [assumption].

given #8 (I,wt=3): 17 blue(C,G).  [assumption].

given #9 (I,wt=3): 18 blue(D,I).  [assumption].

given #10 (I,wt=3): 19 blue(E,H).  [assumption].

given #11 (I,wt=3): 20 blue(F,J).  [assumption].

given #12 (I,wt=3): 21 blue(G,H).  [assumption].

given #13 (I,wt=9): 22 red(A,C) | red(A,E) | red(A,G).  [assumption].

given #14 (I,wt=6): 23 blue(D,A) | blue(D,B).  [assumption].

given #15 (I,wt=3): 24 path_red(x,x).  [assumption].

given #16 (I,wt=3): 25 -path_red(A,B).  [deny(3)].

given #17 (I,wt=12): 26 -path_red(x,y) | -blue(y,z) | -red(z,u) | path_red(x,u).  [resolve(4,c,5,a)].

given #18 (I,wt=12): 27 -path_red(x,y) | -blue(y,z) | -red(u,z) | path_red(x,u).  [resolve(4,c,6,a)].

given #19 (I,wt=12): 28 -path_red(x,y) | -blue(z,y) | -red(z,u) | path_red(x,u).  [resolve(7,c,5,a)].

given #20 (I,wt=12): 29 -path_red(x,y) | -blue(z,y) | -red(u,z) | path_red(x,u).  [resolve(7,c,6,a)].

given #21 (I,wt=6): 30 -red(x,y) | path_red(x,y).  [resolve(8,a,5,a)].

given #22 (I,wt=6): 31 -red(x,y) | path_red(y,x).  [resolve(8,a,6,a)].

given #23 (I,wt=6): 32 -path_red(A,x) | -blue(x,B).  [resolve(9,a,4,c)].

given #24 (I,wt=6): 33 -path_red(A,x) | -blue(B,x).  [resolve(9,a,7,c)].

given #25 (A,wt=9): 34 -blue(x,y) | -red(y,z) | path_red(x,z).  [resolve(26,a,24,a)].

given #26 (F,wt=3): 36 -path_red(A,D).  [ur(27,b,18,a,c,11,a,d,25,a)].

given #27 (F,wt=3): 37 -blue(A,I).  [ur(27,a,24,a,c,11,a,d,25,a)].

given #28 (F,wt=3): 38 -blue(A,F).  [ur(27,a,24,a,c,10,a,d,25,a)].

given #29 (F,wt=3): 41 -path_red(A,J).  [ur(29,b,20,a,c,10,a,d,25,a)].

given #30 (T,wt=3): 45 path_red(I,J).  [resolve(30,a,16,a)].

given #31 (T,wt=3): 46 path_red(G,I).  [resolve(30,a,15,a)].

given #32 (T,wt=3): 47 path_red(E,I).  [resolve(30,a,14,a)].

given #33 (T,wt=3): 48 path_red(D,J).  [resolve(30,a,13,a)].

given #34 (A,wt=9): 35 -blue(x,y) | -red(z,y) | path_red(x,z).  [resolve(27,a,24,a)].

given #35 (F,wt=3): 42 -blue(I,A).  [ur(29,a,24,a,c,11,a,d,25,a)].

given #36 (F,wt=3): 43 -blue(F,A).  [ur(29,a,24,a,c,10,a,d,25,a)].

given #37 (F,wt=3): 52 -red(A,B).  [ur(30,b,25,a)].

given #38 (F,wt=3): 61 -red(B,A).  [ur(31,b,25,a)].

given #39 (T,wt=3): 49 path_red(C,H).  [resolve(30,a,12,a)].

given #40 (T,wt=3): 50 path_red(B,I).  [resolve(30,a,11,a)].

given #41 (T,wt=3): 51 path_red(B,F).  [resolve(30,a,10,a)].

given #42 (T,wt=3): 54 path_red(J,I).  [resolve(31,a,16,a)].

given #43 (A,wt=9): 39 -blue(x,y) | -red(x,z) | path_red(y,z).  [resolve(28,a,24,a)].

given #44 (F,wt=3): 62 -blue(A,B).  [resolve(32,a,24,a)].

given #45 (F,wt=3): 63 -blue(B,A).  [resolve(33,a,24,a)].

given #46 (F,wt=3): 70 -red(D,A).  [ur(31,b,36,a)].

given #47 (F,wt=3): 71 -red(A,D).  [ur(30,b,36,a)].

given #48 (T,wt=3): 55 path_red(I,G).  [resolve(31,a,15,a)].

given #49 (T,wt=3): 56 path_red(I,E).  [resolve(31,a,14,a)].

given #50 (T,wt=3): 57 path_red(J,D).  [resolve(31,a,13,a)].

given #51 (T,wt=3): 58 path_red(H,C).  [resolve(31,a,12,a)].

given #52 (A,wt=9): 40 -blue(x,y) | -red(z,x) | path_red(y,z).  [resolve(29,a,24,a)].

given #53 (F,wt=3): 72 -blue(J,A).  [ur(29,a,24,a,c,13,a,d,36,a)].

given #54 (F,wt=3): 73 -path_red(A,F).  [ur(27,b,20,a,c,13,a,d,36,a)].

given #55 (F,wt=3): 74 -blue(A,J).  [ur(27,a,24,a,c,13,a,d,36,a)].

given #56 (F,wt=3): 75 -blue(A,D).  [ur(34,b,13,a,c,41,a)].

given #57 (T,wt=3): 59 path_red(I,B).  [resolve(31,a,11,a)].

given #58 (T,wt=3): 60 path_red(F,B).  [resolve(31,a,10,a)].

given #59 (T,wt=3): 81 blue(D,B).  [back_unit_del(23),unit_del(a,79)].

given #60 (T,wt=6): 65 -red(H,x) | path_red(G,x).  [resolve(34,a,21,a)].

given #61 (A,wt=9): 44 path_red(A,E) | red(A,C) | red(A,G).  [resolve(30,a,22,b)].

given #62 (F,wt=3): 76 -red(J,A).  [ur(31,b,41,a)].

given #63 (F,wt=3): 77 -red(A,J).  [ur(30,b,41,a)].

given #64 (F,wt=3): 78 -path_red(A,I).  [ur(28,b,18,a,c,13,a,d,41,a)].

given #65 (F,wt=3): 79 -blue(D,A).  [ur(28,a,24,a,c,13,a,d,41,a)].

given #66 (T,wt=6): 66 -red(J,x) | path_red(F,x).  [resolve(34,a,20,a)].

given #67 (T,wt=6): 67 -red(H,x) | path_red(E,x).  [resolve(34,a,19,a)].

given #68 (T,wt=6): 68 -red(I,x) | path_red(D,x).  [resolve(34,a,18,a)].

given #69 (T,wt=6): 69 -red(G,x) | path_red(C,x).  [resolve(34,a,17,a)].

given #70 (A,wt=9): 53 path_red(E,A) | red(A,C) | red(A,G).  [resolve(31,a,22,b)].

given #71 (F,wt=3): 145 -red(F,A).  [ur(31,b,73,a)].

given #72 (F,wt=3): 146 -red(A,F).  [ur(30,b,73,a)].

given #73 (F,wt=3): 164 -blue(G,A).  [ur(39,b,15,a,c,78,a)].

given #74 (F,wt=3): 165 -blue(E,A).  [ur(39,b,14,a,c,78,a)].

given #75 (T,wt=3): 172 path_red(C,I).  [resolve(69,a,15,a)].

given #76 (T,wt=6): 80 -red(B,x) | path_red(D,x).  [back_unit_del(64),unit_del(c,79)].

given #77 (T,wt=3): 181 path_red(D,I).  [resolve(80,a,11,a)].

given #78 (T,wt=3): 182 path_red(D,F).  [resolve(80,a,10,a)].

given #79 (A,wt=9): 82 -blue(x,J) | -red(y,x) | path_red(I,y).  [resolve(45,a,29,a)].

given #80 (F,wt=3): 166 -blue(A,G).  [ur(34,b,15,a,c,78,a)].

given #81 (F,wt=3): 167 -blue(A,E).  [ur(34,b,14,a,c,78,a)].

given #82 (F,wt=3): 168 -red(I,A).  [ur(31,b,78,a)].

given #83 (F,wt=3): 169 -red(A,I).  [ur(30,b,78,a)].

given #84 (T,wt=6): 98 -red(x,H) | path_red(G,x).  [resolve(35,a,21,a)].

given #85 (T,wt=3): 192 path_red(G,C).  [resolve(98,a,12,a)].

given #86 (T,wt=6): 99 -red(x,J) | path_red(F,x).  [resolve(35,a,20,a)].

given #87 (T,wt=3): 197 path_red(F,I).  [resolve(99,a,16,a)].

given #88 (A,wt=9): 83 -blue(x,J) | -red(x,y) | path_red(I,y).  [resolve(45,a,28,a)].

given #89 (F,wt=3): 170 -path_red(A,H).  [ur(28,b,21,a,c,15,a,d,78,a)].

given #90 (F,wt=3): 171 -path_red(A,C).  [ur(26,b,17,a,c,15,a,d,78,a)].

given #91 (F,wt=3): 204 -blue(C,A).  [ur(39,b,12,a,c,170,a)].

given #92 (F,wt=3): 205 -blue(A,C).  [ur(34,b,12,a,c,170,a)].

given #93 (T,wt=3): 198 path_red(F,D).  [resolve(99,a,13,a)].

given #94 (T,wt=3): 225 red(A,G).  [back_unit_del(44),unit_del(a,213),unit_del(b,212)].

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.00) seconds.
% Length of proof is 34.
% Level of proof is 8.
% Maximum clause weight is 12.000.
% Given clauses 94.

1 path_blue(x,y) & (red(y,z) | red(z,y)) -> path_red(x,z) # label(non_clause).  [assumption].
2 path_red(x,y) & (blue(y,z) | blue(z,y)) -> path_blue(x,z) # label(non_clause).  [assumption].
3 path_blue(A,B) | path_red(A,B) # label(non_clause) # label(goal).  [goal].
4 -path_red(x,y) | -blue(y,z) | path_blue(x,z).  [clausify(2)].
5 -path_blue(x,y) | -red(y,z) | path_red(x,z).  [clausify(1)].
6 -path_blue(x,y) | -red(z,y) | path_red(x,z).  [clausify(1)].
7 -path_red(x,y) | -blue(z,y) | path_blue(x,z).  [clausify(2)].
8 path_blue(x,x).  [assumption].
10 red(B,F).  [assumption].
12 red(C,H).  [assumption].
13 red(D,J).  [assumption].
15 red(G,I).  [assumption].
17 blue(C,G).  [assumption].
18 blue(D,I).  [assumption].
19 blue(E,H).  [assumption].
20 blue(F,J).  [assumption].
21 blue(G,H).  [assumption].
22 red(A,C) | red(A,E) | red(A,G).  [assumption].
25 -path_red(A,B).  [deny(3)].
26 -path_red(x,y) | -blue(y,z) | -red(z,u) | path_red(x,u).  [resolve(4,c,5,a)].
27 -path_red(x,y) | -blue(y,z) | -red(u,z) | path_red(x,u).  [resolve(4,c,6,a)].
28 -path_red(x,y) | -blue(z,y) | -red(z,u) | path_red(x,u).  [resolve(7,c,5,a)].
29 -path_red(x,y) | -blue(z,y) | -red(u,z) | path_red(x,u).  [resolve(7,c,6,a)].
30 -red(x,y) | path_red(x,y).  [resolve(8,a,5,a)].
41 -path_red(A,J).  [ur(29,b,20,a,c,10,a,d,25,a)].
44 path_red(A,E) | red(A,C) | red(A,G).  [resolve(30,a,22,b)].
78 -path_red(A,I).  [ur(28,b,18,a,c,13,a,d,41,a)].
170 -path_red(A,H).  [ur(28,b,21,a,c,15,a,d,78,a)].
171 -path_red(A,C).  [ur(26,b,17,a,c,15,a,d,78,a)].
208 -path_red(A,G).  [ur(28,b,17,a,c,12,a,d,170,a)].
212 -red(A,C).  [ur(30,b,171,a)].
213 -path_red(A,E).  [ur(27,b,19,a,c,12,a,d,171,a)].
225 red(A,G).  [back_unit_del(44),unit_del(a,213),unit_del(b,212)].
231 $F.  [resolve(225,a,30,a),unit_del(a,208)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=94. Generated=267. Kept=221. proofs=1.
Usable=90. Sos=104. Demods=0. Limbo=1, Disabled=56. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=45. Back_subsumed=11.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=15.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=832. Nonunit_bsub_feature_tests=530.
Megabytes=0.25.
User_CPU=0.02, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 4295 exit (max_proofs) Tue Jan 20 12:31:37 2015
