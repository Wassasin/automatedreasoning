formulas(assumptions).

exists x A(x).
exists x B(x).
exists x C(x).
exists x D(x).
exists x E(x).
exists x F(x).
exists x G(x).
exists x H(x).
exists x I(x).
exists x J(x).

% Undirected graphs
red(x, y) -> red(y, x).
blue(x, y) -> blue(y, x).

% A(x) & (C(y) | E(y) | G(y)) -> red(x, y).

B(x) & F(y) -> red(x,y).
B(x) & I(y) -> red(x,y).
C(x) & H(y) -> red(x,y).
D(x) & J(y) -> red(x,y).
E(x) & I(y) -> red(x,y).
G(x) & I(y) -> red(x,y).
I(x) & J(y) -> red(x,y).

% D(x) & (A(y) | B(y)) -> blue(x, y).

C(x) & G(y) -> blue(x,y).
D(x) & I(y) -> blue(x,y).
E(x) & H(y) -> blue(x,y).
F(x) & J(y) -> blue(x,y).
G(x) & H(y) -> blue(x,y).

% Extra edges
A(x) & E(y) -> red(x, y).
B(x) & D(y) -> blue(x, y).

% A(x) & B(y) -> red(x, y).

% We start at vertex A.
A(x) -> reachable_blue(x) & reachable_red(x).

% All vertices are reachable by a blue edge if there exists a vertex which was reachable by a red edge and an edge exists between these two vertices
reachable_blue(x) & red(x, y) -> reachable_red(y).
reachable_red(x) & blue(x, y) -> reachable_blue(y).

end_of_list.

formulas(goals).

% Find an alternating path to B.
B(x) -> ( reachable_blue(x) | reachable_red(x) ).

end_of_list.
